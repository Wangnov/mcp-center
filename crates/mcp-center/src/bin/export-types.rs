//! TypeScript 类型导出工具
//!
//! 此脚本将 Rust 类型导出为 TypeScript 类型定义。
//! 运行: cargo run --bin export-types

use mcp_center::{
    config::ServerProtocol,
    daemon::{
        logging::{LogCategory, LogEntry, LogLevel, ServerContext, ToolContext},
        server_manager::ServerSnapshot,
    },
    web::http::{
        CreateMcpRequest, LogEntriesResponse, LogFileSummary, LogListResponse, LogServerSummary,
        McpListResponse, ProjectAssignRequest, ProjectListResponse, ProjectSummary,
        ProjectToolDescRequest, ProjectToolResetRequest, ProjectToolsRequest, ServerDetail,
        ServerDetailResponse, ToolListResponse, ToolSummary, UpdateMcpEnabled,
    },
};
use specta::ts::{BigIntExportBehavior, ExportConfiguration, TsExportError};

type ExportFn = fn(&ExportConfiguration) -> Result<String, TsExportError>;

const EXPORT_TARGETS: &[(&str, ExportFn)] = &[
    ("ServerProtocol (enum)", specta::ts::export::<ServerProtocol>),
    ("ServerSnapshot", specta::ts::export::<ServerSnapshot>),
    ("McpListResponse", specta::ts::export::<McpListResponse>),
    ("ProjectListResponse", specta::ts::export::<ProjectListResponse>),
    ("ToolSummary", specta::ts::export::<ToolSummary>),
    ("ToolListResponse", specta::ts::export::<ToolListResponse>),
    ("ServerDetail", specta::ts::export::<ServerDetail>),
    ("ServerDetailResponse", specta::ts::export::<ServerDetailResponse>),
    ("ProjectSummary", specta::ts::export::<ProjectSummary>),
    ("CreateMcpRequest", specta::ts::export::<CreateMcpRequest>),
    ("UpdateMcpEnabled", specta::ts::export::<UpdateMcpEnabled>),
    ("ProjectAssignRequest", specta::ts::export::<ProjectAssignRequest>),
    ("ProjectToolsRequest", specta::ts::export::<ProjectToolsRequest>),
    ("ProjectToolDescRequest", specta::ts::export::<ProjectToolDescRequest>),
    ("ProjectToolResetRequest", specta::ts::export::<ProjectToolResetRequest>),
    ("LogFileSummary", specta::ts::export::<LogFileSummary>),
    ("LogServerSummary", specta::ts::export::<LogServerSummary>),
    ("LogListResponse", specta::ts::export::<LogListResponse>),
    ("LogEntriesResponse", specta::ts::export::<LogEntriesResponse>),
    ("LogEntry", specta::ts::export::<LogEntry>),
    ("ServerContext", specta::ts::export::<ServerContext>),
    ("ToolContext", specta::ts::export::<ToolContext>),
    ("LogLevel", specta::ts::export::<LogLevel>),
    ("LogCategory", specta::ts::export::<LogCategory>),
];

fn main() {
    // 配置 TypeScript 导出器
    // 将 BigInt 类型（u64, i64, u128, i128, usize, isize）导出为 TypeScript number
    // 注意：这适用于时间戳和计数器，但需要确保值不超过 Number.MAX_SAFE_INTEGER (2^53-1)
    let export_config = ExportConfiguration::default().bigint(BigIntExportBehavior::Number);

    // 生成 TypeScript 类型字符串
    let mut ts_output = String::new();

    ts_output.push_str("// 此文件由 cargo run --bin export-types 自动生成\n");
    ts_output.push_str("// WARNING: Do not edit this file manually!\n");
    ts_output.push_str("// NOTE: u64/usize types are exported as TypeScript number\n");
    ts_output.push_str(
        "//       Ensure these values do not exceed Number.MAX_SAFE_INTEGER (9007199254740991)\n\n",
    );

    let type_defs: Vec<String> = EXPORT_TARGETS
        .iter()
        .map(|(name, exporter)| {
            exporter(&export_config).unwrap_or_else(|err| panic!("failed to export {name}: {err}"))
        })
        .collect();

    if !type_defs.is_empty() {
        ts_output.push_str(&type_defs.join("\n\n"));
        ts_output.push('\n');
    }

    // 写入文件
    let output_path = "../../src/lib/api-types.generated.ts";
    std::fs::write(output_path, ts_output).expect("Failed to write TypeScript file");

    println!("TypeScript 类型已成功导出到: {output_path}");
    println!("生成的类型包括:");
    for (label, _) in EXPORT_TARGETS {
        println!("  - {label}");
    }
}
